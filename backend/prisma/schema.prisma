// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(SALES_REP)
  avatar    String?
  isActive  Boolean  @default(true)
  metadata  Json?    // Extensible user fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedContacts Contact[] @relation("UserAssignedContacts")
  assignedDeals    Deal[]   @relation("UserAssignedDeals")
  assignedTasks    Task[]   @relation("UserAssignedTasks")
  assignedCalls    Call[]   @relation("UserAssignedCalls")
  assignedNotes    Note[]   @relation("UserAssignedNotes")
  assignedMessages Message[] @relation("UserAssignedMessages")
  createdCompanies Company[] @relation("UserCreatedCompanies")
  createdContacts  Contact[] @relation("UserCreatedContacts")
  createdDeals     Deal[]   @relation("UserCreatedDeals")
  createdTasks     Task[]   @relation("UserCreatedTasks")
  createdCalls     Call[]   @relation("UserCreatedCalls")
  createdNotes     Note[]   @relation("UserCreatedNotes")
  createdMessages  Message[] @relation("UserCreatedMessages")

  @@map("users")
}

enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
}

// Company/Account management
model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?
  industry    String?
  size        String?
  description String?
  metadata    Json?    // Extensible company fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("UserCreatedCompanies", fields: [createdById], references: [id])

  // Relations
  contacts Contact[]

  @@map("companies")
}

// Contact management
model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  mobile      String?
  jobTitle    String?
  department  String?
  metadata    Json?    // Extensible contact fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  assignedToId String?
  assignedTo   User?   @relation("UserAssignedContacts", fields: [assignedToId], references: [id])
  createdById String
  createdBy   User     @relation("UserCreatedContacts", fields: [createdById], references: [id])
  
  // Related entities
  deals       Deal[]
  tasks       Task[]
  calls       Call[]
  notes       Note[]
  messages    Message[]

  @@map("contacts")
}

// Deal/Opportunity management
model Deal {
  id              String   @id @default(cuid())
  title           String
  description     String?
  value           Decimal? @db.Decimal(15, 2)
  currency        String   @default("USD")
  stage           DealStage @default(LEAD)
  probability     Int?     @default(0)
  expectedCloseDate DateTime?
  actualCloseDate DateTime?
  metadata        Json?    // Extensible deal fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  contactId       String
  contact         Contact  @relation(fields: [contactId], references: [id])
  assignedToId    String?
  assignedTo      User?    @relation("UserAssignedDeals", fields: [assignedToId], references: [id])
  createdById     String
  createdBy       User     @relation("UserCreatedDeals", fields: [createdById], references: [id])
  
  // Related entities
  tasks    Task[]
  calls    Call[]
  notes    Note[]
  messages Message[]

  @@map("deals")
}

enum DealStage {
  LEAD
  CONTACT_MADE
  PROPOSAL_SENT
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

// Task management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        TaskType   @default(CALL)
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  metadata    Json?      // Extensible task fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  contactId   String?
  contact     Contact?   @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        Deal?      @relation(fields: [dealId], references: [id])
  assignedToId String?
  assignedTo   User?     @relation("UserAssignedTasks", fields: [assignedToId], references: [id])
  createdById String
  createdBy   User       @relation("UserCreatedTasks", fields: [createdById], references: [id])

  @@map("tasks")
}

enum TaskType {
  CALL
  EMAIL
  MEETING
  FOLLOW_UP
  PROPOSAL
  CONTRACT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Call management
model Call {
  id          String   @id @default(cuid())
  subject     String?
  description String?
  duration    Int?     // Duration in seconds
  outcome     String?
  scheduledAt DateTime?
  completedAt DateTime?
  metadata    Json?    // Extensible call fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        Deal?    @relation(fields: [dealId], references: [id])
  assignedToId String?
  assignedTo   User?   @relation("UserAssignedCalls", fields: [assignedToId], references: [id])
  createdById String
  createdBy   User     @relation("UserCreatedCalls", fields: [createdById], references: [id])

  @@map("calls")
}

// Note management
model Note {
  id          String   @id @default(cuid())
  title       String?
  content     String
  type        NoteType @default(GENERAL)
  metadata    Json?    // Extensible note fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        Deal?    @relation(fields: [dealId], references: [id])
  assignedToId String?
  assignedTo   User?   @relation("UserAssignedNotes", fields: [assignedToId], references: [id])
  createdById String
  createdBy   User     @relation("UserCreatedNotes", fields: [createdById], references: [id])

  @@map("notes")
}

enum NoteType {
  GENERAL
  CALL_SUMMARY
  MEETING_NOTES
  PROPOSAL_FEEDBACK
  NEGOTIATION_NOTES
  CLOSING_NOTES
}

// Message management
model Message {
  id          String      @id @default(cuid())
  subject     String?
  content     String
  type        MessageType @default(EMAIL)
  direction   Direction   @default(OUTBOUND)
  status      MessageStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  metadata    Json?       // Extensible message fields
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  contactId   String?
  contact     Contact?    @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        Deal?       @relation(fields: [dealId], references: [id])
  assignedToId String?
  assignedTo   User?      @relation("UserAssignedMessages", fields: [assignedToId], references: [id])
  createdById String
  createdBy   User        @relation("UserCreatedMessages", fields: [createdById], references: [id])

  @@map("messages")
}

enum MessageType {
  EMAIL
  SMS
  WHATSAPP
  LINKEDIN
  OTHER
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
} 