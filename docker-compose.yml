services:
  postgres:
    image: postgres:15-alpine
    container_name: saleshub-postgres
    environment:
      POSTGRES_DB: sales_crm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Miyako2020
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sales_crm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service (for production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: saleshub-backend
    environment:
      DATABASE_URL: postgresql://postgres:Miyako2020@postgres:5432/sales_crm?sslmode=disable
      JWT_SECRET: your-super-secret-jwt-key-here
      PORT: 8089
    ports:
      - "8089:8089"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - production

  # Redis service
  redis:
    image: redis:7-alpine
    container_name: saleshub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service (for production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: saleshub-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8089
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
