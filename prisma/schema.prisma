// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(SALES_REP)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedContacts Contact[] @relation("AssignedTo")
  assignedDeals    Deal[]    @relation("AssignedTo")
  tasks            Task[]
  communications   Communication[]
  
  @@map("users")
}

model Contact {
  id           String      @id @default(cuid())
  firstName    String
  lastName     String
  email        String?     @unique
  phone        String?
  company      String?
  jobTitle     String?
  website      String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  leadSource   LeadSource?
  leadStatus   LeadStatus  @default(NEW)
  notes        String?
  lastContactDate DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  assignedToId   String?
  assignedTo     User?           @relation("AssignedTo", fields: [assignedToId], references: [id])
  deals          Deal[]
  tasks          Task[]
  communications Communication[]
  
  @@map("contacts")
}

model Deal {
  id          String      @id @default(cuid())
  title       String
  description String?
  value       Float?
  probability Int?        @default(0) // 0-100
  stage       DealStage   @default(NEW_LEAD)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  contactId    String
  contact      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo   User?   @relation("AssignedTo", fields: [assignedToId], references: [id])
  tasks        Task[]
  communications Communication[]
  
  @@map("deals")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        TaskType   @default(FOLLOW_UP)
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  dealId    String?
  deal      Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Communication {
  id         String            @id @default(cuid())
  type       CommunicationType
  subject    String?
  content    String?
  direction  Direction         @default(OUTBOUND)
  duration   Int?              // for calls, in minutes
  outcome    String?
  scheduled  Boolean           @default(false)
  scheduledFor DateTime?
  completedAt  DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  dealId    String?
  deal      Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  @@map("communications")
}

// Enums
enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
}

enum LeadSource {
  WEBSITE
  EMAIL_CAMPAIGN
  SOCIAL_MEDIA
  REFERRAL
  COLD_CALL
  TRADE_SHOW
  WEBINAR
  ADVERTISEMENT
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW
  QUALIFIED
  CONTACTED
  INTERESTED
  NOT_INTERESTED
  CONVERTED
  DEAD
}

enum DealStage {
  NEW_LEAD
  QUALIFIED
  CONTACTED
  MEETING_DEMO_SET
  PROPOSAL_NEGOTIATION
  DECISION_MAKER_BOUGHT_IN
  CONTRACT_SENT
  CLOSED_WON
  CLOSED_LOST
}

enum TaskType {
  CALL
  EMAIL
  MEETING
  FOLLOW_UP
  DEMO
  PROPOSAL
  CONTRACT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  PHONE_CALL
  MEETING
  TEXT_MESSAGE
  VIDEO_CALL
  NOTE
}

enum Direction {
  INBOUND
  OUTBOUND
}